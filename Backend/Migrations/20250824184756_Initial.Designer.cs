// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(CrewQuizContext))]
    [Migration("20250824184756_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Domains.CurrentGame", b =>
                {
                    b.Property<long>("CurrentGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CurrentGameId"));

                    b.Property<long?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnOrder(4);

                    b.Property<bool>("IsStarted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnOrder(3);

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnOrder(1);

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(7);

                    b.HasKey("CurrentGameId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("QuizId");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("CurrentGame");
                });

            modelBuilder.Entity("Backend.Models.Domains.CurrentGameQuestion", b =>
                {
                    b.Property<long>("CurrentGameId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AnsweredByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(5);

                    b.Property<long?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsAnswered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnOrder(2);

                    b.Property<bool>("IsCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnOrder(3);

                    b.Property<bool>("IsRobbingAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnOrder(4);

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(8);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CurrentGameId", "QuestionId");

                    b.HasIndex("AnsweredByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrentGameId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CurrentGameQuestion");
                });

            modelBuilder.Entity("Backend.Models.Domains.CurrentGameUser", b =>
                {
                    b.Property<long>("CurrentGameId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnOrder(2);

                    b.Property<bool>("IsGameMaster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnOrder(3);

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnOrder(4);

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(7);

                    b.HasKey("CurrentGameId", "UserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrentGameId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("CurrentGameId", "UserId")
                        .IsUnique();

                    b.ToTable("CurrentGameUser");
                });

            modelBuilder.Entity("Backend.Models.Domains.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("QuestionId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(2);

                    b.Property<long?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(5);

                    b.Property<string>("Inquiry")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnOrder(1);

                    b.Property<short>("Point")
                        .HasColumnType("smallint")
                        .HasColumnOrder(3);

                    b.Property<long>("QuestionGroupId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(4);

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(7);

                    b.HasKey("QuestionId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("QuestionGroupId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("QuestionGroupId", "Inquiry")
                        .IsUnique();

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Backend.Models.Domains.QuestionGroup", b =>
                {
                    b.Property<long>("QuestionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("QuestionGroupId"));

                    b.Property<long?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(1);

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(5);

                    b.HasKey("QuestionGroupId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("CreatedByUserId", "Name")
                        .IsUnique();

                    b.ToTable("QuestionGroup");
                });

            modelBuilder.Entity("Backend.Models.Domains.QuestionGroupQuiz", b =>
                {
                    b.Property<long>("QuestionGroupId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(4);

                    b.HasKey("QuestionGroupId", "QuizId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("QuestionGroupId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("QuestionGroupId", "QuizId")
                        .IsUnique();

                    b.ToTable("QuestionGroupQuiz");
                });

            modelBuilder.Entity("Backend.Models.Domains.Quiz", b =>
                {
                    b.Property<long>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("QuizId"));

                    b.Property<long?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(1);

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(4);

                    b.HasKey("QuizId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("Name", "CreatedByUserId")
                        .IsUnique();

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("Backend.Models.Domains.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(5);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnOrder(1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnOrder(2);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(4);

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(7);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnOrder(3);

                    b.HasKey("UserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Backend.Models.Domains.CurrentGame", b =>
                {
                    b.HasOne("Backend.Models.Domains.User", "CreatedByUser")
                        .WithMany("CurrentGames")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.Quiz", "Quiz")
                        .WithMany("CurrentGames")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.User", "UpdatedByUser")
                        .WithMany("UpdatedCurrentGames")
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Quiz");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Backend.Models.Domains.CurrentGameQuestion", b =>
                {
                    b.HasOne("Backend.Models.Domains.User", "AnsweredByUser")
                        .WithMany("AnsweredCurrentGameQuestions")
                        .HasForeignKey("AnsweredByUserId");

                    b.HasOne("Backend.Models.Domains.User", "CreatedByUser")
                        .WithMany("CurrentGameQuestions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.CurrentGame", "CurrentGame")
                        .WithMany("CurrentGameQuestions")
                        .HasForeignKey("CurrentGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.Question", "Question")
                        .WithMany("CurrentGameQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.User", "UpdatedByUser")
                        .WithMany("UpdatedCurrentGameQuestions")
                        .HasForeignKey("UpdatedByUserId");

                    b.HasOne("Backend.Models.Domains.User", null)
                        .WithMany("UpdatedAnsweredCurrentGameQuestions")
                        .HasForeignKey("UserId");

                    b.Navigation("AnsweredByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CurrentGame");

                    b.Navigation("Question");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Backend.Models.Domains.CurrentGameUser", b =>
                {
                    b.HasOne("Backend.Models.Domains.User", "CreatedByUser")
                        .WithMany("CurrentGameUsers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.CurrentGame", "CurrentGame")
                        .WithMany("CurrentGameUsers")
                        .HasForeignKey("CurrentGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.User", "UpdatedByUser")
                        .WithMany("UpdatedCurrentGameUsers")
                        .HasForeignKey("UpdatedByUserId");

                    b.HasOne("Backend.Models.Domains.User", "User")
                        .WithOne("CurrentGameUser")
                        .HasForeignKey("Backend.Models.Domains.CurrentGameUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("CurrentGame");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Domains.Question", b =>
                {
                    b.HasOne("Backend.Models.Domains.User", "CreatedByUser")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.QuestionGroup", "QuestionGroup")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.User", "UpdatedByUser")
                        .WithMany("UpdatedQuestions")
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("QuestionGroup");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Backend.Models.Domains.QuestionGroup", b =>
                {
                    b.HasOne("Backend.Models.Domains.User", "CreatedByUser")
                        .WithMany("QuestionGroups")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.User", "UpdatedByUser")
                        .WithMany("UpdatedQuestionGroups")
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Backend.Models.Domains.QuestionGroupQuiz", b =>
                {
                    b.HasOne("Backend.Models.Domains.User", "CreatedByUser")
                        .WithMany("QuestionGroupQuizzes")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.QuestionGroup", null)
                        .WithMany()
                        .HasForeignKey("QuestionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.User", "UpdatedByUser")
                        .WithMany("UpdatedQuestionGroupQuizzes")
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Backend.Models.Domains.Quiz", b =>
                {
                    b.HasOne("Backend.Models.Domains.User", "CreatedByUser")
                        .WithMany("Quizzes")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Domains.User", "UpdatedByUser")
                        .WithMany("UpdatedQuizzes")
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Backend.Models.Domains.User", b =>
                {
                    b.HasOne("Backend.Models.Domains.User", "CreatedByUser")
                        .WithMany("Users")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Backend.Models.Domains.User", "UpdatedByUser")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Backend.Models.Domains.CurrentGame", b =>
                {
                    b.Navigation("CurrentGameQuestions");

                    b.Navigation("CurrentGameUsers");
                });

            modelBuilder.Entity("Backend.Models.Domains.Question", b =>
                {
                    b.Navigation("CurrentGameQuestions");
                });

            modelBuilder.Entity("Backend.Models.Domains.QuestionGroup", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Backend.Models.Domains.Quiz", b =>
                {
                    b.Navigation("CurrentGames");
                });

            modelBuilder.Entity("Backend.Models.Domains.User", b =>
                {
                    b.Navigation("AnsweredCurrentGameQuestions");

                    b.Navigation("CurrentGameQuestions");

                    b.Navigation("CurrentGameUser");

                    b.Navigation("CurrentGameUsers");

                    b.Navigation("CurrentGames");

                    b.Navigation("QuestionGroupQuizzes");

                    b.Navigation("QuestionGroups");

                    b.Navigation("Questions");

                    b.Navigation("Quizzes");

                    b.Navigation("UpdatedAnsweredCurrentGameQuestions");

                    b.Navigation("UpdatedCurrentGameQuestions");

                    b.Navigation("UpdatedCurrentGameUsers");

                    b.Navigation("UpdatedCurrentGames");

                    b.Navigation("UpdatedQuestionGroupQuizzes");

                    b.Navigation("UpdatedQuestionGroups");

                    b.Navigation("UpdatedQuestions");

                    b.Navigation("UpdatedQuizzes");

                    b.Navigation("UpdatedUsers");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
